import logging
import imaplib
import email
import threading
import time
from bs4 import BeautifulSoup
from work_w_env.envreader import EnvReader
from request_to_links.req_link import link_parser
from telegram_instrumentation.tg_sender import run_bot, send_message

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

reader = EnvReader()
reader.getter_env()

# –ò—Å–ø–æ–ª—å–∑—É–µ–º Event, —á—Ç–æ–±—ã –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∂–∏–ª–∞, –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Ä–∞–±–æ—Ç–∞ –ø–æ—Ç–æ–∫–∞
exit_event = threading.Event()

def decode_part(part):
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞"""
    payload = part.get_payload(decode=True) if part else None
    if not payload:
        logger.warning("‚ö† –ü—É—Å—Ç–æ–π payload, –≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π")
        return None

    return payload.decode('utf-8', errors='ignore')


def extract_links_from_html(body):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —Å—Å—ã–ª–∫–∏ –∏–∑ HTML"""
    soup = BeautifulSoup(body, "html.parser")
    return [a['href'] for a in soup.find_all('a', href=True)]


def reformat_links(links):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫"""
    for link in links:
        clean_url = link.replace('new_offer?', '').split('"')[0].replace('3D', '').replace('=', 's/') + '/view'
        data = link_parser(clean_url)
        send_message(data, clean_url)


def fetch_emails():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∏—Å–µ–º (–°–ò–ù–•–†–û–ù–ù–û)"""
    while not exit_event.is_set():  # –†–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        try:
            logger.info("üì© –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ—á—Ç—É...")

            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–µ
            mail = imaplib.IMAP4_SSL(reader.imap)
            mail.login(reader.login, reader.password)
            mail.select('INBOX/Newsletters')

            # –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º
            result, data = mail.search(None, '(UNSEEN FROM "{}")'.format(reader.sender_mail))
            if result != 'OK':
                mail.logout()
                time.sleep(1800)  # –ï—Å–ª–∏ –Ω–µ—Ç –ø–∏—Å–µ–º, –∂–¥—ë–º 30 –º–∏–Ω—É—Ç
                continue

            links_list = []
            for email_id in data[0].split():
                result, msg_data = mail.fetch(email_id, '(RFC822)')
                if result != 'OK':
                    continue

                msg = email.message_from_bytes(msg_data[0][1])
                for part in msg.walk():
                    if part.get_content_type() == "text/html":
                        decoded_body = decode_part(part)
                        if decoded_body:
                            links_list.extend([l for l in extract_links_from_html(decoded_body) if 'https://kwork.ru/new_offer' in l])

                mail.store(email_id, '+FLAGS', '\\Seen')  # –û—Ç–º–µ—á–∞–µ–º –ø–∏—Å—å–º–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ

            mail.logout()

            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Å—Å—ã–ª–∫–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö
            if links_list:
                reformat_links(links_list)

        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∏—Å–µ–º: {e}')
        timeout = 60 * 2
        logger.info(f'–ñ–¥–µ–º {timeout} —Å–µ–∫—É–Ω–¥')
        time.sleep(timeout)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–∏—Å–µ–º –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π —Å—Ä–µ–¥–µ"""
    email_thread = threading.Thread(target=fetch_emails, daemon=True)
    email_thread.start()

    logger.info('‚è≥ –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø–æ—Ç–æ–∫–∞ –ø–æ—á—Ç—ã...')
    run_bot()  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ

    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—á—Ç—ã
    email_thread.join()

if __name__ == "__main__":
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã')
    main()
