import logging
import os

import telebot
from telebot import types
import threading
from ai_operations.connection_ai import client_data
from ai_operations.lexicon_for_ai import prompt
import dotenv

dotenv.load_dotenv()

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)


bot_group = os.getenv('bot_group')


bot_token = os.getenv('bot_token')
bot = telebot.TeleBot(bot_token)


def split_message(text, max_lenght=4096):
    if text:
        if len(text) <= max_lenght:
            logger.debug('–°–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—å—à–µ 4096 all good')
            return [text]
        logger.debug('–°–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª—å—à–µ 4096 —Ä–∞–∑–±–∏–≤–∫–∞')
        lines = text.splitlines()
        parts = []
        current_part = ''
        for line in lines:
            if len(current_part) + len(line) + 1 <= max_lenght:
                current_part += line + '\n'
            else:
                parts.append(current_part.strip())
                current_part = line + '\n'
        if current_part:
            parts.append(current_part.strip())

        return parts


def send_message(message: list, links: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram"""
    if len(message) == 4:
        project_name, description, min_price, max_price = message

        keyboard = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏", url=links)
        keyboard.add(button)

        text = (f'<b>‚ú®–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</b>‚ú®: {project_name}\n'
                f'<i>{description}</i>\n'
                f'<b>üí∏–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞üí∏</b>: {min_price} ‚ÇΩ\n'
                f'<b>üí∞–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞üí∞</b>: {max_price} ‚ÇΩ')

        prompt_replaced = prompt.replace('[title]', project_name).replace('[description]', description).replace('[min_budget]', min_price).replace('[max_budget]', max_price)

        ai_updated_message = client_data(prompt_replaced)
        text = text + f'\n<b>ü§ñ–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ü§ñ</b> {ai_updated_message}'
        splited_message = split_message(text)
        try:
            for msg in splited_message:
                bot.send_message(bot_group, msg, reply_markup=keyboard, parse_mode='HTML')
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {bot_group}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    bot.polling(none_stop=True)


def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ —á–µ—Ä–µ–∑ –ø–æ—Ç–æ–∫"""
    bot_thread = threading.Thread(target=start_bot, daemon=True)
    bot_thread.start()


if __name__ == "__main__":
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã')
    run_bot()
