import logging
import os
import time
import json
import threading
import asyncio
import websockets
import telebot
from telebot import types
from queue import Queue
import dotenv
from server_operations.listener import listen
dotenv.load_dotenv()

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

bot_group = os.getenv('bot_group')
bot_token = os.getenv('bot_token')
bot = telebot.TeleBot(bot_token)

queue = Queue()  # –û—á–µ—Ä–µ–¥—å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –ø–æ—Ç–æ–∫–∞–º–∏


def split_message(text, max_length=4096):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏"""
    if text:
        if len(text) <= max_length:
            return [text]
        lines = text.splitlines()
        parts = []
        current_part = ''
        for line in lines:
            if len(current_part) + len(line) + 1 <= max_length:
                current_part += line + '\n'
            else:
                parts.append(current_part.strip())
                current_part = line + '\n'
        if current_part:
            parts.append(current_part.strip())

        return parts


def send_message(message: list, links: str, ai_answer:str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram"""
    if len(message) == 4:
        project_name, description, min_price, max_price = message

        keyboard = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏", url=links)
        keyboard.add(button)

        text = (f'<b>‚ú®–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</b>‚ú®: {project_name}\n'
                f'<i>{description}</i>\n'
                f'<b>üí∏–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞üí∏</b>: {min_price} ‚ÇΩ\n'
                f'<b>üí∞–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞üí∞</b>: {max_price} ‚ÇΩ\n'
                f'<b>ü§ñ–û—Ç–≤–µ—Ç –æ—Ç –ù–µ–π—Ä–æ—Å–µ—Ç–∏ü§ñ</b>: {ai_answer}')

        splited_message = split_message(text)
        try:
            for msg in splited_message:
                time.sleep(0.5)
                bot.send_message(bot_group, msg, reply_markup=keyboard, parse_mode='HTML')
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {bot_group}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


def process_queue():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ WebSocket –≤ Telegram"""
    while True:
        data = queue.get()  # –ñ–¥—ë—Ç –¥–∞–Ω–Ω—ã–µ
        if isinstance(data, list):
            for i in range(len(data)):
                scraped_message = data[i]['scraped_info']
                link = data[i]['link']
                ai_answer = data[i]['ai_answer']
                send_message(scraped_message, link, ai_answer)
            # send_message([project_name, description, min_price, max_price], project_link)





def start_ws_listener():
    """–ó–∞–ø—É—Å–∫ WebSocket –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    asyncio.run(listen(queue))


def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    bot.polling(none_stop=True)


if __name__ == "__main__":
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã')

    # –ü–æ—Ç–æ–∫ –¥–ª—è WebSocket
    ws_thread = threading.Thread(target=start_ws_listener, daemon=True)
    ws_thread.start()

    # –ü–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    queue_thread = threading.Thread(target=process_queue, daemon=True)
    queue_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    start_bot()
